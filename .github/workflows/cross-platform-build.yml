name: Cross platform build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: g++
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake with -O0
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake -S . -B "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL=O0
          cmake --build "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" --config Release
        else
          cmake -S . -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL=O0
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
        fi

    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          exe_path="$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")/Release/main.exe"
          echo "Running: $exe_path"
          "$exe_path"
        else
          cd ${{ steps.strings.outputs.build-output-dir }}
          ./main
        fi

    - name: Configure CMake with -O1
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake -S . -B "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL=O1
          cmake --build "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" --config Release
        else
          cmake -S . -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL=O1
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
        fi

    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          exe_path="$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")/Release/main.exe"
          echo "Running: $exe_path"
          "$exe_path"
        else
          cd ${{ steps.strings.outputs.build-output-dir }}
          ./main
        fi

    - name: Configure CMake with -O2
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake -S . -B "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL=O2
          cmake --build "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" --config Release
        else
          cmake -S . -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL=O2
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
        fi

    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          exe_path="$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")/Release/main.exe"
          echo "Running: $exe_path"
          "$exe_path"
        else
          cd ${{ steps.strings.outputs.build-output-dir }}
          ./main
        fi

    - name: Configure CMake with -O3
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          cmake -S . -B "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL==O3
          cmake --build "$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")" --config Release
        else
          cmake -S . -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPT_LEVEL=O3
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
        fi

    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          exe_path="$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")/Release/main.exe"
          echo "Running: $exe_path"
          "$exe_path"
        else
          cd ${{ steps.strings.outputs.build-output-dir }}
          ./main
        fi

